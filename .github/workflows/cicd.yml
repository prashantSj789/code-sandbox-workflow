name: Generate CodeSandbox on Changes

on:
  push:
    branches:
      - main  # Adjust this to your target branch

jobs:
  create_codesandbox:
    runs-on: ubuntu-latest
    steps:
    
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      # Step 1: Capture the previous and current commit files
      - name: Copy previous and current files
        run: |
          git checkout HEAD^
          cp src/index.html prev_index.html || echo "" > prev_index.html
          cp src/style.css prev_style.css || echo "" > prev_style.css
          cp src/app.js prev_app.js || echo "" > prev_app.js
          
          git checkout -
          cp src/index.html new_index.html || echo "" > new_index.html
          cp src/style.css new_style.css || echo "" > new_style.css
          cp src/app.js new_app.js || echo "" > new_app.js

      # Step 2: Check for differences
      - name: Check for file differences
        id: check_diff
        run: |
          DIFF_OUTPUT=$(git diff --name-only HEAD^ HEAD src/index.html src/style.css src/app.js)
          if [[ -z "$DIFF_OUTPUT" ]]; then
            echo "changes_detected=false" >> $GITHUB_ENV
          else
            echo "changes_detected=true" >> $GITHUB_ENV
          fi

      # Step 3: Create CodeSandbox with previous content (only if changes detected)
      - name: Create CodeSandbox with Previous Content
        if: env.changes_detected == 'true'
        id: create_prev_sandbox
        run: |
          HTML_CONTENT=$(cat prev_index.html | tr '\n' ' ')
          CSS_CONTENT=$(cat prev_style.css | tr '\n' ' ')
          JS_CONTENT=$(cat prev_app.js | tr '\n' ' ')
          
          PAYLOAD=$(jq -n \
            --arg html "$HTML_CONTENT" \
            --arg css "$CSS_CONTENT" \
            --arg js "$JS_CONTENT" \
            '{ files: { "index.html": { content: $html }, "style.css": { content: $css }, "app.js": { content: $js } } }')

          RESPONSE=$(curl -s -X POST 'https://codesandbox.io/api/v1/sandboxes/define?json=1' \
            -H "Content-Type: application/json" \
            -d "$PAYLOAD")

          SANDBOX_ID=$(echo "$RESPONSE" | jq -r '.sandbox_id')
          if [[ "$SANDBOX_ID" == "null" ]]; then
            echo "Error: CodeSandbox ID is null for Previous Content."
            exit 1
          fi

          echo "prev_sandbox_id=$SANDBOX_ID" >> $GITHUB_ENV

      # Step 4: Create CodeSandbox with new content (only if changes detected)
      - name: Create CodeSandbox with New Content
        if: env.changes_detected == 'true'
        id: create_new_sandbox
        run: |
          HTML_CONTENT=$(cat new_index.html | tr '\n' ' ')
          CSS_CONTENT=$(cat new_style.css | tr '\n' ' ')
          JS_CONTENT=$(cat new_app.js | tr '\n' ' ')
          
          PAYLOAD=$(jq -n \
            --arg html "$HTML_CONTENT" \
            --arg css "$CSS_CONTENT" \
            --arg js "$JS_CONTENT" \
            '{ files: { "index.html": { content: $html }, "style.css": { content: $css }, "app.js": { content: $js } }')

          RESPONSE=$(curl -s -X POST 'https://codesandbox.io/api/v1/sandboxes/define?json=1' \
            -H "Content-Type: application/json" \
            -d "$PAYLOAD")

          SANDBOX_ID=$(echo "$RESPONSE" | jq -r '.sandbox_id')
          if [[ "$SANDBOX_ID" == "null" ]]; then
            echo "Error: CodeSandbox ID is null for New Content."
            exit 1
          fi

          echo "new_sandbox_id=$SANDBOX_ID" >> $GITHUB_ENV

      # Optional Step: Output the Sandbox URLs
      - name: Display CodeSandbox URLs
        if: env.changes_detected == 'true'
        run: |
          echo "Previous Sandbox URL: https://codesandbox.io/s/$prev_sandbox_id"
          echo "New Sandbox URL: https://codesandbox.io/s/$new_sandbox_id"
